{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "TODO fill me in ...",

	"Parameters" : {

		"Environment" : {
			"Description" : "Target deployment environment",
			"Type" : "String",
			"Default" : "aws",
			"AllowedValues" : [ "aws" , "uc2s" , "sc2s", "c2s" ]
		},

		"VpcCidr" : {
			"Description" : "The CIDR block the VPC will cover",
			"Type" : "String",
			"MinLength" : "9",
			"MaxLength" : "18",
			"Default" : "10.0.0.0/16",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    	},

    	"VpcId" : {
    		"Description" : "ID of pre-existing VPC to re-use (if applicable)",
    		"Type" : "AWS::EC2::VPC::Id",
    		"Default" : "AWS::NoValue"
    	},

    	"PrivateSubnetCidr" : {
			"Description" : "The CIDR block for the private subnet",
			"Type" : "String",
			"MinLength" : "9",
			"MaxLength" : "18",
			"Default" : "10.0.0.0/17",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    	},

    	"PublicSubnetCidr" : {
			"Description" : "The CIDR block for the public subnet",
			"Type" : "String",
			"MinLength" : "9",
			"MaxLength" : "18",
			"Default" : "10.0.128.0/20",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    	},

    	"PublicSubnetId" : {
    		"Description" : "ID of pre-existing public subnet to re-use (if applicable)",
    		"Type" : "AWS::EC2::Subnet::Id",
    		"Default" : "AWS::NoValue"
    	},

    	"NATInstanceType" : {
    		"Description" : "",
    		"Type" : "String",
    		"Default" : "m3.medium",
    		"AllowedValues" : [ "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge" ]
    	},

    	"KeyName" : {
    		"Description" : "Specify your AWS EC2 Key Pair.",
    		"Type" : "AWS::EC2::KeyPair::KeyName",
    		"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    	},

    	"AdminLocation" : {
			"Description" : "Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
			"Type" : "String",
			"MinLength" : "9",
			"MaxLength" : "18",
			"Default" : "128.229.4.2/32",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    	},

    	"PublicAgentIngressCidr" : {
			"Description" : "Specify the IP range to whitelist for access to services running on public agents.",
			"Type" : "String",
			"MinLength" : "9",
			"MaxLength" : "18",
			"Default" : "128.229.4.2/32",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    	}

	},

	"Conditions" : {
		"CreatePrerequisites" : {
			"Fn::Not": [{
				"Fn::Equals" : [ { "Ref" : "Environment" } , "c2s" ]
			}] 
		}
	},

	"Mappings" : {
		"NATAmi": {
			"us-west-2": {
				"default": "ami-bb69128b"
			},
			"us-gov-west-1": {
				"default": "ami-e8ab1489"
			},
			"ap-southeast-2": {
				"default": "ami-996402a3"
			},
			"eu-central-1": {
				"default": "ami-204c7a3d"
			},
			"eu-west-1": {
				"default": "ami-3760b040"
			},
			"us-east-1": {
				"default": "ami-4c9e4b24"
			},
			"ap-northeast-1": {
				"default": "ami-55c29e54"
			},
			"sa-east-1": {
				"default": "ami-b972dba4"
			},
			"ap-southeast-1": {
				"default": "ami-b082dae2"
			},
			"us-west-1": {
				"default": "ami-2b2b296e"
			}
		}
	},

	"Resources" : {

		"VPC" : {
			"Type" : "AWS::EC2::VPC",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : { "Ref" : "VpcCidr" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Name" , "Value" : { "Ref" : "AWS::StackName" } }
				]
			}
		},

		"InternetGateway" : {
			"Type" : "AWS::EC2::InternetGateway",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Name" , "Value" : { "Ref" : "AWS::StackName" } }
				]
			}
		},

		"AttachInternetGatewayToVPC" : {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"InternetGatewayId" : { "Ref" : "InternetGateway" },
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"PublicSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : { "Ref" : "PublicSubnetCidr" },
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Name", "Value" : { "Fn::Join" : [ "", [{ "Ref" : "AWS::StackName" }, "-public"]]} }
				]
			}
		},

		"PublicRouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Public" }
				]
			}
		},

		"PublicRoute" : {
			"Type" : "AWS::EC2::Route",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" },
				"RouteTableId" : { "Ref" : "PublicRouteTable" }
			}
		},

		"PublicSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"RouteTableId" : { "Ref" : "PublicRouteTable" },
				"SubnetId" : { "Ref" : "PublicSubnet" }
			}
		},

		"PrivateSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : { "Ref" : "PrivateSubnetCidr" },
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Name", "Value" : { "Fn::Join" : [ "", [{ "Ref" : "AWS::StackName" }, "-private"]]} }
				]
			}
		},

		"PrivateRouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Private" }
				]
			}
		},

		"PrivateRoute" : {
			"Type" : "AWS::EC2::Route",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"DestinationCidrBlock" : "0.0.0.0/0",
				"InstanceId" : { "Ref" : "NATInstance" },
				"RouteTableId" : { "Ref" : "PrivateRouteTable" }
			}
		},

		"PrivateSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"RouteTableId" : { "Ref" : "PrivateRouteTable" },
				"SubnetId" : { "Ref" : "PrivateSubnet" }
			}
		},

		"PublicNetworkAcl" : {
			"Type" : "AWS::EC2::NetworkAcl",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Public" }
				]
			}
		},

		"PublicInboundNetworkAclEntry" : {
			"Type" : "AWS::EC2::NetworkAclEntry",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : "0.0.0.0/0",
				"Egress" : "false",
				"NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
				"Protocol" : "-1",
				"RuleAction" : "allow",
				"RuleNumber" : "100",
				"PortRange" : {
					"From" : "0",
					"To" : "65535"
				}
		   }
		},

		"PublicOutboundNetworkAclEntry" : {
			"Type" : "AWS::EC2::NetworkAclEntry",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : "0.0.0.0/0",
				"Egress" : "true",
				"NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
				"Protocol" : "-1",
				"RuleAction" : "allow",
				"RuleNumber" : "100",
				"PortRange" : {
					"From" : "0",
					"To" : "65535"
				}
		   }
		},

		"PublicSubnetNetworkAclAssociation" : {
			"Type" : "AWS::EC2::SubnetNetworkAclAssociation",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"SubnetId" : { "Ref" : "PublicSubnet" },
				"NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
			}
		},

		"PrivateNetworkAcl" : {
			"Type" : "AWS::EC2::NetworkAcl",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } },
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Private" }
				]
			}
		},

		"PrivateInboundNetworkAclEntry" : {
			"Type" : "AWS::EC2::NetworkAclEntry",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : "0.0.0.0/0",
				"Egress" : "false",
				"NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
				"Protocol" : "-1",
				"RuleAction" : "allow",
				"RuleNumber" : "100",
				"PortRange" : {
					"From" : "0",
					"To" : "65535"
				}
		   }
		},

		"PrivateOutboundNetworkAclEntry" : {
			"Type" : "AWS::EC2::NetworkAclEntry",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"CidrBlock" : "0.0.0.0/0",
				"Egress" : "true",
				"NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
				"Protocol" : "-1",
				"RuleAction" : "allow",
				"RuleNumber" : "100",
				"PortRange" : {
					"From" : "0",
					"To" : "65535"
				}
		   }
		},

		"PrivateSubnetNetworkAclAssociation" : {
			"Type" : "AWS::EC2::SubnetNetworkAclAssociation",
			"Condition" : "CreatePrerequisites",
			"Properties" : {
				"SubnetId" : { "Ref" : "PrivateSubnet" },
				"NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
			}
		},

		"NATInstance" : {
			"Type" : "AWS::EC2::Instance",
			"Properties" : {
				"InstanceType" : { "Ref" : "NATInstanceType" },
				"ImageId" : { "Fn::FindInMap" : [ "NATAmi", { "Ref" : "AWS::Region" }, "default" ] },
				"KeyName" : { "Ref" : "KeyName" },
				"SourceDestCheck" : "false",
				"NetworkInterfaces" : [
					{
						"DeleteOnTermination" : "true",
						"DeviceIndex" : "0",
						"AssociatePublicIpAddress" : "true",
						"GroupSet" : [
							{ "Ref" : "PrivateAgentSecurityGroup" },
							{ "Ref" : "MasterSecurityGroup" },
							{ "Ref" : "AdminSecurityGroup" }
						],
						"SubnetId" : { "Fn::If" : [
								"CreatePrerequisites",
								{ "Ref" : "PublicSubnet" },
								{ "Ref" : "PublicSubnetId" }
							] 
						}
					}
				],
				"Tags" : [ 
					{ "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } }, 
					{ "Key" : "role", "Value" : "NATInstance" } 
				]
			}
		},

		"PrivateAgentSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Mesos Private Agents",
				"VpcId" : { "Fn::If" : [
						"CreatePrerequisites",
						{ "Ref" : "VPC" },
						{ "Ref" : "VpcId" }
					] 
				},
				"Tags" : [ { "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } } ]
			}
		},

		"LbSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Mesos Master LB",
				"VpcId" : { "Fn::If" : [
						"CreatePrerequisites",
						{ "Ref" : "VPC" },
						{ "Ref" : "VpcId" }
					] 
				},
				"Tags" : [ { "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } } ]
			}
		},

		"PublicAgentSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Mesos Public Agents",
				"VpcId" : { "Fn::If" : [
						"CreatePrerequisites",
						{ "Ref" : "VPC" },
						{ "Ref" : "VpcId" }
					] 
				},
				"Tags" : [ { "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } } ]
			}
		},

		"MasterSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Mesos Masters",
				"VpcId" : { "Fn::If" : [
						"CreatePrerequisites",
						{ "Ref" : "VPC" },
						{ "Ref" : "VpcId" }
					] 
				},
				"Tags" : [ { "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } } ],
				"SecurityGroupIngress" : [
					{
						"IpProtocol" : "tcp",
						"FromPort" : "5050",
						"ToPort" : "5050",
						"SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "80",
						"ToPort" : "80",
						"SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "443",
						"ToPort" : "443",
						"SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "8080",
						"ToPort" : "8080",
						"SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "8181",
						"ToPort" : "8181",
						"SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "2181",
						"ToPort" : "2181",
						"SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" }
					}
				]
			}	
		},

		"AdminSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable admin access to servers",
				"VpcId" : { "Fn::If" : [
						"CreatePrerequisites",
						{ "Ref" : "VPC" },
						{ "Ref" : "VpcId" }
					] 
				},
				"Tags" : [ { "Key" : "StackId", "Value" : { "Ref" : "AWS::StackId" } } ],
				"SecurityGroupIngress" : [
					{
						"IpProtocol" : "tcp",
						"FromPort" : "22",
						"ToPort" : "22",
						"CidrIp" : { "Ref" : "AdminLocation" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "80",
						"ToPort" : "80",
						"CidrIp" : { "Ref" : "AdminLocation" }
					},
					{
						"IpProtocol" : "tcp",
						"FromPort" : "443",
						"ToPort" : "443",
						"CidrIp" : { "Ref" : "AdminLocation" }
					}
				]
			}	
		},

		"PrivateAgentToPrivateAgentIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "PrivateAgentSecurityGroup" },
				"GroupId" : { "Ref" : "PrivateAgentSecurityGroup" }
			}
		},

		"PrivateAgentToPublicAgentIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "PrivateAgentSecurityGroup" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PrivateAgentToMasterIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "PrivateAgentSecurityGroup" },
				"GroupId" : { "Ref" : "MasterSecurityGroup" }
			}
		},

		"PublicAgentToPrivateAgentIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "PublicAgentSecurityGroup" },
				"GroupId" : { "Ref" : "PrivateAgentSecurityGroup" }
			}
		},

		"PublicAgentToPublicAgentIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "PublicAgentSecurityGroup" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PublicAgentToMasterIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "PublicAgentSecurityGroup" },
				"GroupId" : { "Ref" : "MasterSecurityGroup" }
			}
		},

		"MasterToPrivateAgentIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" },
				"GroupId" : { "Ref" : "PrivateAgentSecurityGroup" }
			}
		},

		"MasterToPublicAgentIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"MasterToMasterIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "-1",
				"FromPort" : "0",
				"ToPort" : "65535",
				"SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" },
				"GroupId" : { "Ref" : "MasterSecurityGroup" }
			}
		},

		"PrivateAgentToMasterLBIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "tcp",
				"FromPort" : "2181",
				"ToPort" : "2181",
				"SourceSecurityGroupId" : { "Ref" : "PrivateAgentSecurityGroup" },
				"GroupId" : { "Ref" : "LbSecurityGroup" }
			}
		},

		"PublicAgentIngressOne" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "tcp",
				"FromPort" : "0",
				"ToPort" : "21",
				"CidrIp" : { "Ref" : "PublicAgentIngressCidr" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PublicAgentIngressTwo" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "tcp",
				"FromPort" : "23",
				"ToPort" : "5050",
				"CidrIp" : { "Ref" : "PublicAgentIngressCidr" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PublicAgentIngressThree" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "tcp",
				"FromPort" : "5052",
				"ToPort" : "32000",
				"CidrIp" : { "Ref" : "PublicAgentIngressCidr" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PublicAgentIngressFour" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "udp",
				"FromPort" : "0",
				"ToPort" : "21",
				"CidrIp" : { "Ref" : "PublicAgentIngressCidr" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PublicAgentIngressFive" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "udp",
				"FromPort" : "23",
				"ToPort" : "5050",
				"CidrIp" : { "Ref" : "PublicAgentIngressCidr" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		},

		"PublicAgentIngressSix" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"IpProtocol" : "udp",
				"FromPort" : "5052",
				"ToPort" : "32000",
				"CidrIp" : { "Ref" : "PublicAgentIngressCidr" },
				"GroupId" : { "Ref" : "PublicAgentSecurityGroup" }
			}
		}

	},

	"Outputs" : {

		"VpcId" : {
			"Description" : "The ID of the VPC",
			"Value" : { "Ref" : "VPC" },
			"Condition" : "CreatePrerequisites"
		},

		"InternetGatewayId" : {
			"Description" : "The ID of the Internet Gateway",
			"Value" : { "Ref" : "InternetGateway" },
			"Condition" : "CreatePrerequisites"
		},

		"PublicSubnetId" : {
			"Description" : "The ID of the public subnet",
			"Value" : { "Ref" : "PublicSubnet" },
			"Condition" : "CreatePrerequisites"
		},

		"PublicRouteTableId" : {
			"Description" : "The ID of the Public Route Table",
			"Value" : { "Ref" : "PublicRouteTable" },
			"Condition" : "CreatePrerequisites"
		},

		"PublicNetworkAclId" : {
			"Description" : "The ID of the public NACL",
			"Value" : { "Ref" : "PublicNetworkAcl" },
			"Condition" : "CreatePrerequisites"
		},

		"PrivateSubnetId" : {
			"Description" : "The ID of the private subnet",
			"Value" : { "Ref" : "PrivateSubnet" },
			"Condition" : "CreatePrerequisites"
		},

		"PrivateRouteTableId" : {
			"Description" : "The ID of the Private Route Table",
			"Value" : { "Ref" : "PrivateRouteTable" },
			"Condition" : "CreatePrerequisites"
		},

		"PrivateNetworkAclId" : {
			"Description" : "The ID of the private NACL",
			"Value" : { "Ref" : "PrivateNetworkAcl" },
			"Condition" : "CreatePrerequisites"
		},

		"NatInstanceId" : {
			"Description" : "The ID of the NAT instance",
			"Value" : { "Ref" : "NATInstance" }
		},

		"PrivateAgentSecurityGroupId" : {
			"Description" : "Security group used by Mesos Private Agents",
			"Value" : { "Ref" : "PrivateAgentSecurityGroup" }
		},

		"MasterSecurityGroupId" : {
			"Description" : "Security group used by Mesos Masters",
			"Value" : { "Ref" : "MasterSecurityGroup" }
		},

		"AdminSecurityGroupId" : {
			"Description" : "Security group used by admins",
			"Value" : { "Ref" : "AdminSecurityGroup" }
		},

		"PublicAgentSecurityGroupId" : {
			"Description" : "Security group used by Mesos Public Agents",
			"Value" : { "Ref" : "PublicAgentSecurityGroup" }
		},

		"LbSecurityGroupId" : {
			"Description" : "Security group used by Mesos Load Balancers",
			"Value" : { "Ref" : "LbSecurityGroup" }
		}

	}

}